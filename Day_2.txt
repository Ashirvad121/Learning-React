Day 2: Components and JSX
Understanding Components
In React, components are the building blocks of user interfaces. They are like reusable, self-contained units of code that can be combined to create
complex UIs. There are two main types of components in React:

Functional Components: These are simple functions that return JSX (JavaScript XML) to describe what the UI should look like. They are the easiest 
and most common type of components in React.

Class Components: These are ES6 classes that extend the React.Component class. They have more features than functional components, including the 
ability to manage state and handle lifecycle methods.

Introducing JSX
JSX is a syntax extension for JavaScript that allows us to write HTML-like code directly in our JavaScript files. It makes writing and visualizing 
React components much more intuitive. JSX elements look like HTML elements, but they are actually JavaScript expressions.

Here's an example of JSX:

function Welcome() {
  return <h1>Hello, World!</h1>;
}

In the above example, the Welcome function is a functional component that returns a JSX element containing an h1 heading. When this component is 
rendered, it will display "Hello, World!" on the screen.

Creating Functional Components
To create a functional component in React, you simply define a function that returns JSX. Let's create a simple functional component together:

Open the src folder in your project.

Create a new file named Greeting.js.

Inside Greeting.js, write the following code:


// Greeting.js
import React from 'react';

function Greeting() {
  return (
    <div>
      <h2>Hello, there!</h2>
      <p>Welcome to my React app.</p>
    </div>
  );
}

export default Greeting;
In the above code, we've created a functional component called Greeting that returns a JSX element containing a div with an h2 heading and a p 
paragraph.

Using Components in the App
Now that we've created our Greeting component, let's use it in our main App component:

Open the src folder and locate the App.js file.

Replace the contents of App.js with the following code:


// App.js
import React from 'react';
import Greeting from './Greeting';

function App() {
  return (
    <div>
      <h1>My React App</h1>
      <Greeting />
    </div>
  );
}

export default App;
In the above code, we import the Greeting component from Greeting.js and use it inside the App component's JSX.

Rendering the App
Now that we have set up our components, let's see the changes in the browser:

Make sure your development server is still running (if not, run npm start).

Open your browser and go to http://localhost:3000 (if it didn't open automatically).

You should see the following output:


My React App
Hello, there!
Welcome to my React app.

Congratulations! You've successfully created and used a functional component with JSX in your React app. Components and JSX are the foundation of 
React, and understanding them is essential for building more complex applications.

In the next lesson, we'll explore Props and State, which are crucial concepts for managing data in React components. Keep up the great work! 

Q.why we write import React from 'react'?
In React, the statement import React from 'react' is used to import the React library. This import is necessary because React code relies on the 
React object, which provides essential functionalities to create and work with React components.

When you write JSX (JavaScript XML) code, it gets transformed into JavaScript code that uses React's functions and components behind the scenes. 
For example, when you use JSX to create a component like this:


function MyComponent() {
  return <div>Hello, World!</div>;
}
Behind the scenes, it is transformed into the following JavaScript code:

function MyComponent() {
  return React.createElement('div', null, 'Hello, World!');
}
As you can see, the React object is being used to create the element.

By importing React from the 'react' package at the beginning of your file, you make the React object available throughout your file. This allows 
you to use JSX and other React features without having to explicitly reference the React object every time.

The statement import React from 'react' is standard practice in almost all React files, ensuring that you can write JSX code and work with React
components seamlessly.




